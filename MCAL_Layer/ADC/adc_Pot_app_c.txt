/* 
 * File:   application.c
 * Author: user
 *
 * Created on June 24, 2023, 3:39 PM
 */

#include "application.h"

void adc_int_fun_1(void);

led_t led1 = {.port_name = PORTD_INDEX, .pin = GPIO_PIN0, .led_status = GPIO_LOW};

chr_lcd_4bit_t lcd1 = {
    .lcd_rs.port = PORTC_INDEX, .lcd_rs.pin = GPIO_PIN0,
    .lcd_rs.direction = GPIO_DIRECTION_OUTPUT, .lcd_rs.logic = GPIO_LOW,
    
    .lcd_en.port = PORTC_INDEX, .lcd_en.pin = GPIO_PIN1,
    .lcd_en.direction = GPIO_DIRECTION_OUTPUT, .lcd_en.logic = GPIO_LOW,
    
    .lcd_data[0].port = PORTC_INDEX, .lcd_data[0].pin = GPIO_PIN2,
    .lcd_data[0].direction = GPIO_DIRECTION_OUTPUT, .lcd_data[0].logic = GPIO_LOW,
    .lcd_data[1].port = PORTC_INDEX, .lcd_data[1].pin = GPIO_PIN3,
    .lcd_data[1].direction = GPIO_DIRECTION_OUTPUT, .lcd_data[1].logic = GPIO_LOW,
    .lcd_data[2].port = PORTC_INDEX, .lcd_data[2].pin = GPIO_PIN4,
    .lcd_data[2].direction = GPIO_DIRECTION_OUTPUT, .lcd_data[2].logic = GPIO_LOW,
    .lcd_data[3].port = PORTC_INDEX, .lcd_data[3].pin = GPIO_PIN5,
    .lcd_data[3].direction = GPIO_DIRECTION_OUTPUT, .lcd_data[3].logic = GPIO_LOW
};

adc_conf_t adc1 = {
    .ADC_IterruptHandler = adc_int_fun_1,
    .acquisition_time = ADC_12_TAD,
    .adc_channel = ADC_CHANNEL_AN0,
    .conversion_clock = ADC_CONVERSION_CLOCK_FOSC_DIV_16,
    .result_format = ADC_RESULT_RIGHT,
    .voltage_reference = ADC_VOLTAGE_REFERENCE_DISABLE
};

uint16 adc_res1 = 0;
uint16 adc_res2 = 0;
uint16 adc_res3 = 0;
uint16 adc_res4 = 0;
uint8 adc_res_txt1[6];
uint8 adc_res_txt2[6];
uint8 adc_res_txt3[6];
uint8 adc_res_txt4[6];
uint8 adc_num = 0;

void adc_int_fun_1(void){
    Std_ReturnType ret;
    if(0 == adc_num){
        ret = ADC_Get_Conversion_Result(&adc1, &adc_res1);
        adc_num = 1;
        if(1023 == adc_res1){
            ret = led_turn_toggle(&led1);
        }
    }
    else if(1 == adc_num){
        ret = ADC_Get_Conversion_Result(&adc1, &adc_res2);
        adc_num = 2;
    }
    else if(2 == adc_num){
        ret = ADC_Get_Conversion_Result(&adc1, &adc_res3);
        adc_num = 3;
    }
    else if(3 == adc_num){
        ret = ADC_Get_Conversion_Result(&adc1, &adc_res4);
        adc_num = 0;
    }
    else{}
}

int main() {
    Std_ReturnType ret = E_NOT_OK;
    application_initialize();
    
    ret = led_initialize(&led1);
    ret = ADC_Init(&adc1);
    ret = lcd_4bit_initialize(&lcd1);
    
    ret = lcd_4bit_send_string_pos(&lcd1, 1, 7, "ADC TEST");
    __delay_ms(250);
    ret = lcd_4bit_send_command(&lcd1, _LCD_CLEAR);
    
    ret = lcd_4bit_send_string_pos(&lcd1, 1, 1, "Pot0: ");
    ret = lcd_4bit_send_string_pos(&lcd1, 2, 1, "Pot1: ");
    ret = lcd_4bit_send_string_pos(&lcd1, 3, 1, "Pot2: ");
    ret = lcd_4bit_send_string_pos(&lcd1, 4, 1, "Pot3: ");
    
    while(1){
        //__delay_ms(000);
        
        if(0 == adc_num){
            ret = ADC_StartConversion_WithInterrupt(&adc1, ADC_CHANNEL_AN0); 
        }
        else if(1 == adc_num){
            ret = ADC_StartConversion_WithInterrupt(&adc1, ADC_CHANNEL_AN1); 
        }
        else if(2 == adc_num){
            ret = ADC_StartConversion_WithInterrupt(&adc1, ADC_CHANNEL_AN2); 
        }
        else if(3 == adc_num){
            ret = ADC_StartConversion_WithInterrupt(&adc1, ADC_CHANNEL_AN3); 
        }
        else{}
        
        ret = convert_uint16_to_string(adc_res1, adc_res_txt1);
        ret = lcd_4bit_send_string_pos(&lcd1, 1, 7, adc_res_txt1);
        
        ret = convert_uint16_to_string(adc_res2, adc_res_txt2);
        ret = lcd_4bit_send_string_pos(&lcd1, 2, 7, adc_res_txt2);
        
        ret = convert_uint16_to_string(adc_res3, adc_res_txt3);
        ret = lcd_4bit_send_string_pos(&lcd1, 3, 7, adc_res_txt3);
        
        ret = convert_uint16_to_string(adc_res4, adc_res_txt4);
        ret = lcd_4bit_send_string_pos(&lcd1, 4, 7, adc_res_txt4);
        
    }

    return (EXIT_SUCCESS);
}

void application_initialize(void){
    Std_ReturnType ret = E_NOT_OK;
    ecu_layer_initialize();
}